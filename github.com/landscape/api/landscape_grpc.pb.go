// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LandscapeServiceClient is the client API for LandscapeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LandscapeServiceClient interface {
	// 查询文章列表
	QueryEssayList(ctx context.Context, in *QueryEssayListReq, opts ...grpc.CallOption) (*QueryEssayListResp, error)
	// 查询相关文章
	QueryRelatedEssayList(ctx context.Context, in *QueryRelatedEssayListReq, opts ...grpc.CallOption) (*QueryRelatedEssayListResp, error)
	//根据UUID查询单篇文章内容
	QueryOneEssay(ctx context.Context, in *QueryOneEssayReq, opts ...grpc.CallOption) (*QueryOneEssayResp, error)
	//获取城市列表
	QueryCityList(ctx context.Context, in *QueryCityListReq, opts ...grpc.CallOption) (*QueryCityListResp, error)
	//获取轮播图图片列表
	QuerySwiperImageList(ctx context.Context, in *QuerySwiperImageListReq, opts ...grpc.CallOption) (*QuerySwiperImageListResp, error)
	//文章排行榜接口
	QueryRankList(ctx context.Context, in *QueryRankListReq, opts ...grpc.CallOption) (*QueryRankListResp, error)
	//城市图片接口
	QueryCityImage(ctx context.Context, in *QueryCityImageReq, opts ...grpc.CallOption) (*QueryCityImageResp, error)
}

type landscapeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLandscapeServiceClient(cc grpc.ClientConnInterface) LandscapeServiceClient {
	return &landscapeServiceClient{cc}
}

func (c *landscapeServiceClient) QueryEssayList(ctx context.Context, in *QueryEssayListReq, opts ...grpc.CallOption) (*QueryEssayListResp, error) {
	out := new(QueryEssayListResp)
	err := c.cc.Invoke(ctx, "/landscape.LandscapeService/QueryEssayList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landscapeServiceClient) QueryRelatedEssayList(ctx context.Context, in *QueryRelatedEssayListReq, opts ...grpc.CallOption) (*QueryRelatedEssayListResp, error) {
	out := new(QueryRelatedEssayListResp)
	err := c.cc.Invoke(ctx, "/landscape.LandscapeService/QueryRelatedEssayList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landscapeServiceClient) QueryOneEssay(ctx context.Context, in *QueryOneEssayReq, opts ...grpc.CallOption) (*QueryOneEssayResp, error) {
	out := new(QueryOneEssayResp)
	err := c.cc.Invoke(ctx, "/landscape.LandscapeService/QueryOneEssay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landscapeServiceClient) QueryCityList(ctx context.Context, in *QueryCityListReq, opts ...grpc.CallOption) (*QueryCityListResp, error) {
	out := new(QueryCityListResp)
	err := c.cc.Invoke(ctx, "/landscape.LandscapeService/QueryCityList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landscapeServiceClient) QuerySwiperImageList(ctx context.Context, in *QuerySwiperImageListReq, opts ...grpc.CallOption) (*QuerySwiperImageListResp, error) {
	out := new(QuerySwiperImageListResp)
	err := c.cc.Invoke(ctx, "/landscape.LandscapeService/QuerySwiperImageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landscapeServiceClient) QueryRankList(ctx context.Context, in *QueryRankListReq, opts ...grpc.CallOption) (*QueryRankListResp, error) {
	out := new(QueryRankListResp)
	err := c.cc.Invoke(ctx, "/landscape.LandscapeService/QueryRankList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landscapeServiceClient) QueryCityImage(ctx context.Context, in *QueryCityImageReq, opts ...grpc.CallOption) (*QueryCityImageResp, error) {
	out := new(QueryCityImageResp)
	err := c.cc.Invoke(ctx, "/landscape.LandscapeService/QueryCityImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LandscapeServiceServer is the server API for LandscapeService service.
// All implementations must embed UnimplementedLandscapeServiceServer
// for forward compatibility
type LandscapeServiceServer interface {
	// 查询文章列表
	QueryEssayList(context.Context, *QueryEssayListReq) (*QueryEssayListResp, error)
	// 查询相关文章
	QueryRelatedEssayList(context.Context, *QueryRelatedEssayListReq) (*QueryRelatedEssayListResp, error)
	//根据UUID查询单篇文章内容
	QueryOneEssay(context.Context, *QueryOneEssayReq) (*QueryOneEssayResp, error)
	//获取城市列表
	QueryCityList(context.Context, *QueryCityListReq) (*QueryCityListResp, error)
	//获取轮播图图片列表
	QuerySwiperImageList(context.Context, *QuerySwiperImageListReq) (*QuerySwiperImageListResp, error)
	//文章排行榜接口
	QueryRankList(context.Context, *QueryRankListReq) (*QueryRankListResp, error)
	//城市图片接口
	QueryCityImage(context.Context, *QueryCityImageReq) (*QueryCityImageResp, error)
	mustEmbedUnimplementedLandscapeServiceServer()
}

// UnimplementedLandscapeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLandscapeServiceServer struct {
}

func (*UnimplementedLandscapeServiceServer) QueryEssayList(context.Context, *QueryEssayListReq) (*QueryEssayListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryEssayList not implemented")
}
func (*UnimplementedLandscapeServiceServer) QueryRelatedEssayList(context.Context, *QueryRelatedEssayListReq) (*QueryRelatedEssayListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRelatedEssayList not implemented")
}
func (*UnimplementedLandscapeServiceServer) QueryOneEssay(context.Context, *QueryOneEssayReq) (*QueryOneEssayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOneEssay not implemented")
}
func (*UnimplementedLandscapeServiceServer) QueryCityList(context.Context, *QueryCityListReq) (*QueryCityListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCityList not implemented")
}
func (*UnimplementedLandscapeServiceServer) QuerySwiperImageList(context.Context, *QuerySwiperImageListReq) (*QuerySwiperImageListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySwiperImageList not implemented")
}
func (*UnimplementedLandscapeServiceServer) QueryRankList(context.Context, *QueryRankListReq) (*QueryRankListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRankList not implemented")
}
func (*UnimplementedLandscapeServiceServer) QueryCityImage(context.Context, *QueryCityImageReq) (*QueryCityImageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCityImage not implemented")
}
func (*UnimplementedLandscapeServiceServer) mustEmbedUnimplementedLandscapeServiceServer() {}

func RegisterLandscapeServiceServer(s *grpc.Server, srv LandscapeServiceServer) {
	s.RegisterService(&_LandscapeService_serviceDesc, srv)
}

func _LandscapeService_QueryEssayList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEssayListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandscapeServiceServer).QueryEssayList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landscape.LandscapeService/QueryEssayList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandscapeServiceServer).QueryEssayList(ctx, req.(*QueryEssayListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandscapeService_QueryRelatedEssayList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRelatedEssayListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandscapeServiceServer).QueryRelatedEssayList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landscape.LandscapeService/QueryRelatedEssayList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandscapeServiceServer).QueryRelatedEssayList(ctx, req.(*QueryRelatedEssayListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandscapeService_QueryOneEssay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOneEssayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandscapeServiceServer).QueryOneEssay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landscape.LandscapeService/QueryOneEssay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandscapeServiceServer).QueryOneEssay(ctx, req.(*QueryOneEssayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandscapeService_QueryCityList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCityListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandscapeServiceServer).QueryCityList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landscape.LandscapeService/QueryCityList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandscapeServiceServer).QueryCityList(ctx, req.(*QueryCityListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandscapeService_QuerySwiperImageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySwiperImageListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandscapeServiceServer).QuerySwiperImageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landscape.LandscapeService/QuerySwiperImageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandscapeServiceServer).QuerySwiperImageList(ctx, req.(*QuerySwiperImageListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandscapeService_QueryRankList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRankListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandscapeServiceServer).QueryRankList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landscape.LandscapeService/QueryRankList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandscapeServiceServer).QueryRankList(ctx, req.(*QueryRankListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LandscapeService_QueryCityImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCityImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandscapeServiceServer).QueryCityImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/landscape.LandscapeService/QueryCityImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandscapeServiceServer).QueryCityImage(ctx, req.(*QueryCityImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _LandscapeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "landscape.LandscapeService",
	HandlerType: (*LandscapeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryEssayList",
			Handler:    _LandscapeService_QueryEssayList_Handler,
		},
		{
			MethodName: "QueryRelatedEssayList",
			Handler:    _LandscapeService_QueryRelatedEssayList_Handler,
		},
		{
			MethodName: "QueryOneEssay",
			Handler:    _LandscapeService_QueryOneEssay_Handler,
		},
		{
			MethodName: "QueryCityList",
			Handler:    _LandscapeService_QueryCityList_Handler,
		},
		{
			MethodName: "QuerySwiperImageList",
			Handler:    _LandscapeService_QuerySwiperImageList_Handler,
		},
		{
			MethodName: "QueryRankList",
			Handler:    _LandscapeService_QueryRankList_Handler,
		},
		{
			MethodName: "QueryCityImage",
			Handler:    _LandscapeService_QueryCityImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/landscape.proto",
}
