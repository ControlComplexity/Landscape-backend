// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/landscape.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on QueryCityImageReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryCityImageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryCityImageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryCityImageReqMultiError, or nil if none found.
func (m *QueryCityImageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryCityImageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for City

	if len(errors) > 0 {
		return QueryCityImageReqMultiError(errors)
	}

	return nil
}

// QueryCityImageReqMultiError is an error wrapping multiple validation errors
// returned by QueryCityImageReq.ValidateAll() if the designated constraints
// aren't met.
type QueryCityImageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryCityImageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryCityImageReqMultiError) AllErrors() []error { return m }

// QueryCityImageReqValidationError is the validation error returned by
// QueryCityImageReq.Validate if the designated constraints aren't met.
type QueryCityImageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryCityImageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryCityImageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryCityImageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryCityImageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryCityImageReqValidationError) ErrorName() string {
	return "QueryCityImageReqValidationError"
}

// Error satisfies the builtin error interface
func (e QueryCityImageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryCityImageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryCityImageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryCityImageReqValidationError{}

// Validate checks the field values on QueryCityImageResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryCityImageResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryCityImageResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryCityImageRespMultiError, or nil if none found.
func (m *QueryCityImageResp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryCityImageResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Image

	if len(errors) > 0 {
		return QueryCityImageRespMultiError(errors)
	}

	return nil
}

// QueryCityImageRespMultiError is an error wrapping multiple validation errors
// returned by QueryCityImageResp.ValidateAll() if the designated constraints
// aren't met.
type QueryCityImageRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryCityImageRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryCityImageRespMultiError) AllErrors() []error { return m }

// QueryCityImageRespValidationError is the validation error returned by
// QueryCityImageResp.Validate if the designated constraints aren't met.
type QueryCityImageRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryCityImageRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryCityImageRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryCityImageRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryCityImageRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryCityImageRespValidationError) ErrorName() string {
	return "QueryCityImageRespValidationError"
}

// Error satisfies the builtin error interface
func (e QueryCityImageRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryCityImageResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryCityImageRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryCityImageRespValidationError{}

// Validate checks the field values on QueryRankListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryRankListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryRankListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryRankListReqMultiError, or nil if none found.
func (m *QueryRankListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryRankListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for City

	if len(errors) > 0 {
		return QueryRankListReqMultiError(errors)
	}

	return nil
}

// QueryRankListReqMultiError is an error wrapping multiple validation errors
// returned by QueryRankListReq.ValidateAll() if the designated constraints
// aren't met.
type QueryRankListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryRankListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryRankListReqMultiError) AllErrors() []error { return m }

// QueryRankListReqValidationError is the validation error returned by
// QueryRankListReq.Validate if the designated constraints aren't met.
type QueryRankListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryRankListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryRankListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryRankListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryRankListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryRankListReqValidationError) ErrorName() string { return "QueryRankListReqValidationError" }

// Error satisfies the builtin error interface
func (e QueryRankListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryRankListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryRankListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryRankListReqValidationError{}

// Validate checks the field values on QueryRankListResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryRankListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryRankListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryRankListRespMultiError, or nil if none found.
func (m *QueryRankListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryRankListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QueryRankListRespMultiError(errors)
	}

	return nil
}

// QueryRankListRespMultiError is an error wrapping multiple validation errors
// returned by QueryRankListResp.ValidateAll() if the designated constraints
// aren't met.
type QueryRankListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryRankListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryRankListRespMultiError) AllErrors() []error { return m }

// QueryRankListRespValidationError is the validation error returned by
// QueryRankListResp.Validate if the designated constraints aren't met.
type QueryRankListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryRankListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryRankListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryRankListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryRankListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryRankListRespValidationError) ErrorName() string {
	return "QueryRankListRespValidationError"
}

// Error satisfies the builtin error interface
func (e QueryRankListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryRankListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryRankListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryRankListRespValidationError{}

// Validate checks the field values on QuerySwiperImageListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuerySwiperImageListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuerySwiperImageListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuerySwiperImageListReqMultiError, or nil if none found.
func (m *QuerySwiperImageListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QuerySwiperImageListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QuerySwiperImageListReqMultiError(errors)
	}

	return nil
}

// QuerySwiperImageListReqMultiError is an error wrapping multiple validation
// errors returned by QuerySwiperImageListReq.ValidateAll() if the designated
// constraints aren't met.
type QuerySwiperImageListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuerySwiperImageListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuerySwiperImageListReqMultiError) AllErrors() []error { return m }

// QuerySwiperImageListReqValidationError is the validation error returned by
// QuerySwiperImageListReq.Validate if the designated constraints aren't met.
type QuerySwiperImageListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuerySwiperImageListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuerySwiperImageListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuerySwiperImageListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuerySwiperImageListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuerySwiperImageListReqValidationError) ErrorName() string {
	return "QuerySwiperImageListReqValidationError"
}

// Error satisfies the builtin error interface
func (e QuerySwiperImageListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuerySwiperImageListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuerySwiperImageListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuerySwiperImageListReqValidationError{}

// Validate checks the field values on QuerySwiperImageListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuerySwiperImageListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuerySwiperImageListResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuerySwiperImageListRespMultiError, or nil if none found.
func (m *QuerySwiperImageListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *QuerySwiperImageListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return QuerySwiperImageListRespMultiError(errors)
	}

	return nil
}

// QuerySwiperImageListRespMultiError is an error wrapping multiple validation
// errors returned by QuerySwiperImageListResp.ValidateAll() if the designated
// constraints aren't met.
type QuerySwiperImageListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuerySwiperImageListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuerySwiperImageListRespMultiError) AllErrors() []error { return m }

// QuerySwiperImageListRespValidationError is the validation error returned by
// QuerySwiperImageListResp.Validate if the designated constraints aren't met.
type QuerySwiperImageListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuerySwiperImageListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuerySwiperImageListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuerySwiperImageListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuerySwiperImageListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuerySwiperImageListRespValidationError) ErrorName() string {
	return "QuerySwiperImageListRespValidationError"
}

// Error satisfies the builtin error interface
func (e QuerySwiperImageListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuerySwiperImageListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuerySwiperImageListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuerySwiperImageListRespValidationError{}

// Validate checks the field values on QueryCityListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryCityListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryCityListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryCityListReqMultiError, or nil if none found.
func (m *QueryCityListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryCityListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QueryCityListReqMultiError(errors)
	}

	return nil
}

// QueryCityListReqMultiError is an error wrapping multiple validation errors
// returned by QueryCityListReq.ValidateAll() if the designated constraints
// aren't met.
type QueryCityListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryCityListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryCityListReqMultiError) AllErrors() []error { return m }

// QueryCityListReqValidationError is the validation error returned by
// QueryCityListReq.Validate if the designated constraints aren't met.
type QueryCityListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryCityListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryCityListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryCityListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryCityListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryCityListReqValidationError) ErrorName() string { return "QueryCityListReqValidationError" }

// Error satisfies the builtin error interface
func (e QueryCityListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryCityListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryCityListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryCityListReqValidationError{}

// Validate checks the field values on QueryCityListResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryCityListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryCityListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryCityListRespMultiError, or nil if none found.
func (m *QueryCityListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryCityListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProvinces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryCityListRespValidationError{
						field:  fmt.Sprintf("Provinces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryCityListRespValidationError{
						field:  fmt.Sprintf("Provinces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryCityListRespValidationError{
					field:  fmt.Sprintf("Provinces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Success

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return QueryCityListRespMultiError(errors)
	}

	return nil
}

// QueryCityListRespMultiError is an error wrapping multiple validation errors
// returned by QueryCityListResp.ValidateAll() if the designated constraints
// aren't met.
type QueryCityListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryCityListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryCityListRespMultiError) AllErrors() []error { return m }

// QueryCityListRespValidationError is the validation error returned by
// QueryCityListResp.Validate if the designated constraints aren't met.
type QueryCityListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryCityListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryCityListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryCityListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryCityListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryCityListRespValidationError) ErrorName() string {
	return "QueryCityListRespValidationError"
}

// Error satisfies the builtin error interface
func (e QueryCityListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryCityListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryCityListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryCityListRespValidationError{}

// Validate checks the field values on Province with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Province) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Province with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProvinceMultiError, or nil
// if none found.
func (m *Province) ValidateAll() error {
	return m.validate(true)
}

func (m *Province) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ProvinceMultiError(errors)
	}

	return nil
}

// ProvinceMultiError is an error wrapping multiple validation errors returned
// by Province.ValidateAll() if the designated constraints aren't met.
type ProvinceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProvinceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProvinceMultiError) AllErrors() []error { return m }

// ProvinceValidationError is the validation error returned by
// Province.Validate if the designated constraints aren't met.
type ProvinceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProvinceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProvinceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProvinceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProvinceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProvinceValidationError) ErrorName() string { return "ProvinceValidationError" }

// Error satisfies the builtin error interface
func (e ProvinceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvince.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProvinceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProvinceValidationError{}

// Validate checks the field values on QueryOneEssayReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryOneEssayReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOneEssayReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryOneEssayReqMultiError, or nil if none found.
func (m *QueryOneEssayReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOneEssayReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return QueryOneEssayReqMultiError(errors)
	}

	return nil
}

// QueryOneEssayReqMultiError is an error wrapping multiple validation errors
// returned by QueryOneEssayReq.ValidateAll() if the designated constraints
// aren't met.
type QueryOneEssayReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOneEssayReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOneEssayReqMultiError) AllErrors() []error { return m }

// QueryOneEssayReqValidationError is the validation error returned by
// QueryOneEssayReq.Validate if the designated constraints aren't met.
type QueryOneEssayReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOneEssayReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOneEssayReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOneEssayReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOneEssayReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOneEssayReqValidationError) ErrorName() string { return "QueryOneEssayReqValidationError" }

// Error satisfies the builtin error interface
func (e QueryOneEssayReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOneEssayReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOneEssayReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOneEssayReqValidationError{}

// Validate checks the field values on QueryOneEssayResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryOneEssayResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOneEssayResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryOneEssayRespMultiError, or nil if none found.
func (m *QueryOneEssayResp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOneEssayResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEssay()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryOneEssayRespValidationError{
					field:  "Essay",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryOneEssayRespValidationError{
					field:  "Essay",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEssay()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryOneEssayRespValidationError{
				field:  "Essay",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Success

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return QueryOneEssayRespMultiError(errors)
	}

	return nil
}

// QueryOneEssayRespMultiError is an error wrapping multiple validation errors
// returned by QueryOneEssayResp.ValidateAll() if the designated constraints
// aren't met.
type QueryOneEssayRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOneEssayRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOneEssayRespMultiError) AllErrors() []error { return m }

// QueryOneEssayRespValidationError is the validation error returned by
// QueryOneEssayResp.Validate if the designated constraints aren't met.
type QueryOneEssayRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOneEssayRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOneEssayRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOneEssayRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOneEssayRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOneEssayRespValidationError) ErrorName() string {
	return "QueryOneEssayRespValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOneEssayRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOneEssayResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOneEssayRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOneEssayRespValidationError{}

// Validate checks the field values on QueryRelatedEssayListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryRelatedEssayListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryRelatedEssayListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryRelatedEssayListReqMultiError, or nil if none found.
func (m *QueryRelatedEssayListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryRelatedEssayListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for PageNum

	// no validation rules for PageSize

	if len(errors) > 0 {
		return QueryRelatedEssayListReqMultiError(errors)
	}

	return nil
}

// QueryRelatedEssayListReqMultiError is an error wrapping multiple validation
// errors returned by QueryRelatedEssayListReq.ValidateAll() if the designated
// constraints aren't met.
type QueryRelatedEssayListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryRelatedEssayListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryRelatedEssayListReqMultiError) AllErrors() []error { return m }

// QueryRelatedEssayListReqValidationError is the validation error returned by
// QueryRelatedEssayListReq.Validate if the designated constraints aren't met.
type QueryRelatedEssayListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryRelatedEssayListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryRelatedEssayListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryRelatedEssayListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryRelatedEssayListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryRelatedEssayListReqValidationError) ErrorName() string {
	return "QueryRelatedEssayListReqValidationError"
}

// Error satisfies the builtin error interface
func (e QueryRelatedEssayListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryRelatedEssayListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryRelatedEssayListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryRelatedEssayListReqValidationError{}

// Validate checks the field values on QueryRelatedEssayListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryRelatedEssayListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryRelatedEssayListResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryRelatedEssayListRespMultiError, or nil if none found.
func (m *QueryRelatedEssayListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryRelatedEssayListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEssayList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryRelatedEssayListRespValidationError{
						field:  fmt.Sprintf("EssayList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryRelatedEssayListRespValidationError{
						field:  fmt.Sprintf("EssayList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryRelatedEssayListRespValidationError{
					field:  fmt.Sprintf("EssayList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Success

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return QueryRelatedEssayListRespMultiError(errors)
	}

	return nil
}

// QueryRelatedEssayListRespMultiError is an error wrapping multiple validation
// errors returned by QueryRelatedEssayListResp.ValidateAll() if the
// designated constraints aren't met.
type QueryRelatedEssayListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryRelatedEssayListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryRelatedEssayListRespMultiError) AllErrors() []error { return m }

// QueryRelatedEssayListRespValidationError is the validation error returned by
// QueryRelatedEssayListResp.Validate if the designated constraints aren't met.
type QueryRelatedEssayListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryRelatedEssayListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryRelatedEssayListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryRelatedEssayListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryRelatedEssayListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryRelatedEssayListRespValidationError) ErrorName() string {
	return "QueryRelatedEssayListRespValidationError"
}

// Error satisfies the builtin error interface
func (e QueryRelatedEssayListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryRelatedEssayListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryRelatedEssayListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryRelatedEssayListRespValidationError{}

// Validate checks the field values on QueryEssayListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryEssayListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryEssayListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryEssayListReqMultiError, or nil if none found.
func (m *QueryEssayListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryEssayListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keywords

	if m.GetPageNum() <= 0 {
		err := QueryEssayListReqValidationError{
			field:  "PageNum",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := QueryEssayListReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return QueryEssayListReqMultiError(errors)
	}

	return nil
}

// QueryEssayListReqMultiError is an error wrapping multiple validation errors
// returned by QueryEssayListReq.ValidateAll() if the designated constraints
// aren't met.
type QueryEssayListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryEssayListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryEssayListReqMultiError) AllErrors() []error { return m }

// QueryEssayListReqValidationError is the validation error returned by
// QueryEssayListReq.Validate if the designated constraints aren't met.
type QueryEssayListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryEssayListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryEssayListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryEssayListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryEssayListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryEssayListReqValidationError) ErrorName() string {
	return "QueryEssayListReqValidationError"
}

// Error satisfies the builtin error interface
func (e QueryEssayListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryEssayListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryEssayListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryEssayListReqValidationError{}

// Validate checks the field values on QueryEssayListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryEssayListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryEssayListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryEssayListRespMultiError, or nil if none found.
func (m *QueryEssayListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryEssayListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEssayList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryEssayListRespValidationError{
						field:  fmt.Sprintf("EssayList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryEssayListRespValidationError{
						field:  fmt.Sprintf("EssayList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryEssayListRespValidationError{
					field:  fmt.Sprintf("EssayList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Success

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return QueryEssayListRespMultiError(errors)
	}

	return nil
}

// QueryEssayListRespMultiError is an error wrapping multiple validation errors
// returned by QueryEssayListResp.ValidateAll() if the designated constraints
// aren't met.
type QueryEssayListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryEssayListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryEssayListRespMultiError) AllErrors() []error { return m }

// QueryEssayListRespValidationError is the validation error returned by
// QueryEssayListResp.Validate if the designated constraints aren't met.
type QueryEssayListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryEssayListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryEssayListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryEssayListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryEssayListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryEssayListRespValidationError) ErrorName() string {
	return "QueryEssayListRespValidationError"
}

// Error satisfies the builtin error interface
func (e QueryEssayListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryEssayListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryEssayListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryEssayListRespValidationError{}

// Validate checks the field values on Essay with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Essay) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Essay with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EssayMultiError, or nil if none found.
func (m *Essay) ValidateAll() error {
	return m.validate(true)
}

func (m *Essay) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for Time

	// no validation rules for City

	// no validation rules for Type

	// no validation rules for Image

	// no validation rules for Hits

	// no validation rules for Like

	if len(errors) > 0 {
		return EssayMultiError(errors)
	}

	return nil
}

// EssayMultiError is an error wrapping multiple validation errors returned by
// Essay.ValidateAll() if the designated constraints aren't met.
type EssayMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EssayMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EssayMultiError) AllErrors() []error { return m }

// EssayValidationError is the validation error returned by Essay.Validate if
// the designated constraints aren't met.
type EssayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EssayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EssayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EssayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EssayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EssayValidationError) ErrorName() string { return "EssayValidationError" }

// Error satisfies the builtin error interface
func (e EssayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEssay.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EssayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EssayValidationError{}
